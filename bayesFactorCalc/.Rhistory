library(BayesFactor)
bf1 <- anovaBF(rt~SOAcondition*operation*size+subject_nr,data=agg,whichRandom="subject_nr")
data$size <- factor(data$size, levels=c("small","large"))
bf1 <- anovaBF(rt~SOAcondition*operation*size+subject_nr,data=agg,whichRandom="subject_nr")
agg$SOAcondition
bf1 <- anovaBF(rt~as.factor(SOAcondition)*as.factor(operation)*as.factor(size)+subject_nr,data=agg,whichRandom="subject_nr")
bf1 <- anovaBF(rt~as.factor(SOAcondition)*as.factor(operation)*as.factor(size)+subject_nr,data=agg,whichRandom="subject_nr")
agg
bf1 <- anovaBF(rt~as.factor(agg$SOAcondition)*as.factor(agg$operation)*as.factor(agg$size)+subject_nr,data=agg,whichRandom="subject_nr")
# get rid or errors / long RTs / etc
clean = rawdata %>%
filter(accuracy==1 & rt > 200 & rt < mean(rt) + 3*sd(rt))
# quick visualization of RTs
clean %>%
ggplot(aes(x=rt)) +
geom_density()
# quick method to see descriptives
clean %>%
group_by(truth, operation, SOAcondition) %>%
summarize(mRT = mean(rt), medRT = median(rt))
collapsed = clean %>%
group_by(subject_nr,truth, operation, size, SOAcondition) %>%
summarize(mRT = mean(rt)) %>%
write.csv(file="~/Desktop/opPreview.csv")
library(tidyverse)
rawdata = read.csv("~/Dropbox/experiments/ossaProject/cleanedData/ossa.csv")
hist(rawdata$RT)
# get rid or errors / long RTs / etc
clean = rawdata %>%
filter(accuracy==1 & rt > 200 & rt < mean(rt) + 3*sd(rt))
mean(rawdata$RT)
sd(rawdata$RT)
# get rid or errors / long RTs / etc
clean = rawdata %>%
filter(error == 0 & RT > 200 & RT < 5000)
# quick visualization of RTs
clean %>%
ggplot(aes(x=RT)) +
geom_density()
# get rid or errors / long RTs / etc
clean = rawdata %>%
filter(error == 0 & RT > 200 & RT < 2000)
# quick visualization of RTs
clean %>%
ggplot(aes(x=RT)) +
geom_density()
# quick method to see descriptives
clean %>%
group_by(stimulus, hand) %>%
summarize(mRT = mean(RT), medRT = median(RT))
collapsed = clean %>%
group_by(subject_nr, condition) %>%
summarize(mRT = mean(rt)) %>%
write.csv(file="~/Desktop/ossa1.csv")
collapsed = clean %>%
group_by(subject_nr, condition) %>%
summarize(mRT = mean(RT)) %>%
write.csv(file="~/Desktop/ossa1.csv")
collapsed = clean %>%
group_by(subject, condition) %>%
summarize(mRT = mean(RT)) %>%
write.csv(file="~/Desktop/ossa1.csv")
# ossa1 - congruent versus incongruent
collapsed = clean %>%
group_by(subject, condition) %>%
summarize(mRT = mean(RT))
View(collapsed)
# ossa1 - congruent versus incongruent
collapsed = clean %>%
group_by(subject, condition) %>%
summarize(mRT = mean(RT)) %>%
spread(key=condition, value=mRT)
View(collapsed)
# ossa1 - congruent versus incongruent
collapsed = clean %>%
group_by(subject, condition) %>%
summarize(mRT = mean(RT)) %>%
spread(key=condition, value=mRT) %>%
write.csv(file="~/Desktop/ossa1.csv")
# ossa2 - factorial design: operation by hand
collapsed = clean %>%
group_by(subject, stimulus, hand) %>%
summarize(mRT = mean(RT)) %>%
write.csv(file="~/Desktop/ossa1.csv")
# ossa1 - t-test: congruent versus incongruent
collapsed = clean %>%
group_by(subject, condition) %>%
summarize(mRT = mean(RT)) %>%
spread(key=condition, value=mRT) %>%
write.csv(file="~/Desktop/ossa1.csv")
# ossa2 - factorial design: operation by hand
collapsed = clean %>%
group_by(subject, stimulus, hand) %>%
summarize(mRT = mean(RT)) %>%
write.csv(file="~/Desktop/ossa2.csv")
library(tidyverse)
# demographics
demo = read.csv("https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/demographic.csv")
mean(demo$age)
sd(demo$age)
table(demo$gender)
# read in raw data files
rawdata = data.frame()
filestem = "https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/subject-"
for (n in 1:70){
file = paste(filestem, n, ".csv", sep="")
temp = read.csv(file)
d = select(temp, block, correct, present, setSize, response_time)
d$subject_nr = n
rawdata = rbind(rawdata, d)
}
# get rid of practice trials
data = rawdata %>%
filter(block != "practice") %>%
mutate(rt = response_time)
9660-8820
# get rid of errors
clean = data %>%
filter(correct == 1)
8820-7586
# quick visualization of RTs
clean %>%
ggplot(aes(x=rt)) +
geom_density()
# do this instead
clean = data %>%
filter(correct == 1 & rt < 2000)
# collapse into design cells
collapsed = clean %>%
group_by(subject_nr, setSize, present) %>%
summarize(mRT = mean(rt))
# construct matrix of means by set size and probe condition
meansMatrix = collapsed %>%
group_by(setSize, present) %>%
summarize(m = mean(mRT)) %>%
spread(key=present, value=m) %>%
as.matrix()
setSize = meansMatrix[,1]
P = meansMatrix[,3]
NP = meansMatrix[,2]
M = apply(meansMatrix[,2:3], 1, mean)
# make Sternberg plot
plot(x = setSize, y = M,
pch = 3,
cex = 1.5,
xlab = "Number of symbols in memory",
ylab = "RT (ms)",
ylim = c(650,850))
# fit linear model and add to plot
model = lm(M ~ setSize)
abline(model)
summary(model)
# add dots for P and NP probe conditions
points(x = setSize, y = P, pch=19)
points(x = setSize, y = NP, pch=1)
# add error bars
# build a matrix of subject means by set size
subjMeans = collapsed %>%
group_by(subject_nr, setSize) %>%
summarize(m = mean(mRT)) %>%
spread(key=subject_nr, value=m) %>%
as.matrix()
se = function(x) sd(x)/sqrt(length(x))
SE = apply(subjMeans[,2:71], 1, se)
se = function(x) sd(x, na.rm=TRUE)/sqrt(length(x))
SE = apply(subjMeans[,2:71], 1, se)
# add whiskers
arrows(x0 = setSize, y0 = M,
x1 = setSize, y1 = M+SE,
length = 0.05, angle=90)
arrows(x0 = setSize, y0 = M,
x1 = setSize, y1 = M-SE,
length = 0.05, angle=90)
modelP = lm(P ~ setSize)
modelNP = lm(NP ~ setSize)
summary(modelP)
summary(modelNP)
plot(x = setSize, y = P,
pch = 19,
xlab = "Number of symbols in memory",
ylab = "RT (ms)",
ylim = c(650,900))
points(x = setSize, y = NP,
pch=1)
abline(modelP, lty=1)
abline(modelNP, lty=2)
legend(x=3,y=720,
legend=c("Probe present","Probe not present"),
pch=c(19,1),
lty=c(1,2))
modelComp = lm(P-NP ~ setSize)
summary(modelComp)
shiny::runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
data = read.csv("~/Desktop/costApp/cost.csv")
data = read.csv("~/Desktop/costApp/cost.csv")
dat = data %>%
filter(SUBJ == "PHYS" & CRSE != 1100 & FTIC == "Y") %>%
mutate(success = ifelse(GRADE == "A" | GRADE == "B" | GRADE == "C", 1, 0)) %>%
mutate(satPerc = pnorm((SAT-1051)/211)) %>%
mutate(actPerc = pnorm((ACT-20.8)/5.8)) %>%
mutate(testPerc = 100*pmax(satPerc, actPerc, na.rm=TRUE))
table(dat$success)
model = glm(success ~ HS_PERCENTILE + testPerc,
data = dat,
family = binomial(link="logit"))
summary(model)
exp(coef(model))
newdata = data.frame(HS_PERCENTILE = 60,
testPerc = 40)
predict(model, newdata, type="response")
new = c(1, 70, 25, 1000)
exp(coef(model) %*% new)/(1 + exp(coef(model) %*% new))
testType = 1
# plot
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
plot(NA,
xlim=c(0,100),
ylim=c(0,100),
xlab="",
ylab="",
axes=FALSE)
if (testType==0){
axis(1, at = c(0,
100*pnorm(18, mean=20.8, sd=5.8),
100*pnorm(25, mean=20.8, sd=5.8),
100),
labels = c(0,18,25,36))
mtext("ACT",side=1, line=2.5, cex=1.5)
}
else {
axis(1, at = c(0,
100*pnorm(850, mean=1051, sd=211),
100*pnorm(1000, mean=1051, sd=211),
100*pnorm(1200, mean=1051, sd=211),
100),
labels = c(0,850,1000,1200,1600))
mtext("SAT",side=1, line=2.5, cex=1.5)
}
axis(2)
par(las=0)
mtext("HS Percentile",side=2, line=3, cex=1.5)
minThresh = 0.6
xint = (log(minThresh/(1-minThresh)) - coef(model)[1])/coef(model)[3]
yint = (log(minThresh/(1-minThresh)) - coef(model)[1])/coef(model)[2]
lines(x = c(0,xint), y=c(yint,0), lty=2)
dat = data %>%
filter(SUBJ == "MATH" & CRSE != 1100 & FTIC == "Y") %>%
mutate(success = ifelse(GRADE == "A" | GRADE == "B" | GRADE == "C", 1, 0)) %>%
mutate(satPerc = pnorm((SAT-1051)/211)) %>%
mutate(actPerc = pnorm((ACT-20.8)/5.8)) %>%
mutate(testPerc = 100*pmax(satPerc, actPerc, na.rm=TRUE))
table(dat$success)
model = glm(success ~ HS_PERCENTILE + testPerc,
data = dat,
family = binomial(link="logit"))
summary(model)
exp(coef(model))
newdata = data.frame(HS_PERCENTILE = 60,
testPerc = 40)
predict(model, newdata, type="response")
# or do it by hand!
new = c(1, 70, 25, 1000)
exp(coef(model) %*% new)/(1 + exp(coef(model) %*% new))
testType = 1
# plot
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.3, bty = "n", las = 1)
plot(NA,
xlim=c(0,100),
ylim=c(0,100),
xlab="",
ylab="",
axes=FALSE)
if (testType==0){
axis(1, at = c(0,
100*pnorm(18, mean=20.8, sd=5.8),
100*pnorm(25, mean=20.8, sd=5.8),
100),
labels = c(0,18,25,36))
mtext("ACT",side=1, line=2.5, cex=1.5)
}
else {
axis(1, at = c(0,
100*pnorm(850, mean=1051, sd=211),
100*pnorm(1000, mean=1051, sd=211),
100*pnorm(1200, mean=1051, sd=211),
100),
labels = c(0,850,1000,1200,1600))
mtext("SAT",side=1, line=2.5, cex=1.5)
}
axis(2)
par(las=0)
mtext("HS Percentile",side=2, line=3, cex=1.5)
minThresh = 0.6
xint = (log(minThresh/(1-minThresh)) - coef(model)[1])/coef(model)[3]
yint = (log(minThresh/(1-minThresh)) - coef(model)[1])/coef(model)[2]
lines(x = c(0,xint), y=c(yint,0), lty=2)
dat = data %>%
filter(SUBJ == "PHYS" & CRSE != 1100 & FTIC == "Y") %>%
mutate(success = ifelse(GRADE == "A" | GRADE == "B" | GRADE == "C", 1, 0)) %>%
mutate(satPerc = pnorm((SAT-1051)/211)) %>%
mutate(actPerc = pnorm((ACT-20.8)/5.8)) %>%
mutate(testPerc = 100*pmax(satPerc, actPerc, na.rm=TRUE))
table(dat$success)
model = glm(success ~ HS_PERCENTILE + testPerc,
data = dat,
family = binomial(link="logit"))
summary(model)
exp(coef(model))
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp()
runApp('Desktop/costApp')
runApp('Desktop/costApp')
runApp()
runApp('Desktop/costApp')
runApp('Desktop/costApp')
library(tidyverse)
# demographics
demo = read.csv("https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/demographic.csv")
mean(demo$age)
sd(demo$age)
table(demo$gender)
# read in raw data files
rawdata = data.frame()
filestem = "https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/subject-"
for (n in 1:70){
file = paste(filestem, n, ".csv", sep="")
temp = read.csv(file)
d = select(temp, block, correct, present, setSize, response_time)
d$subject_nr = n
rawdata = rbind(rawdata, d)
}
# get rid of practice trials
data = rawdata %>%
filter(block != "practice") %>%
mutate(rt = response_time)
# get rid of errors
clean = data %>%
filter(correct == 1)
# quick visualization of RTs
clean %>%
ggplot(aes(x=rt)) +
geom_density()
# do this instead
clean = data %>%
filter(correct == 1 & rt < 2000)
# collapse into design cells
collapsed = clean %>%
group_by(subject_nr, setSize, present) %>%
summarize(mRT = mean(rt))
# construct matrix of means by set size and probe condition
meansMatrix = collapsed %>%
group_by(setSize, present) %>%
summarize(m = mean(mRT)) %>%
spread(key=present, value=m) %>%
as.matrix()
setSize = meansMatrix[,1]
P = meansMatrix[,3]
NP = meansMatrix[,2]
M = apply(meansMatrix[,2:3], 1, mean)
# make Sternberg plot
plot(x = setSize, y = M,
pch = 3,
cex = 1.5,
xlab = "Number of symbols in memory",
ylab = "RT (ms)",
ylim = c(650,850))
# fit linear model and add to plot
model = lm(M ~ setSize)
abline(model)
summary(model)
# add dots for P and NP probe conditions
points(x = setSize, y = P, pch=19)
points(x = setSize, y = NP, pch=1)
# add error bars
# build a matrix of subject means by set size
subjMeans = collapsed %>%
group_by(subject_nr, setSize) %>%
summarize(m = mean(mRT)) %>%
spread(key=subject_nr, value=m) %>%
as.matrix()
se = function(x) sd(x, na.rm=TRUE)/sqrt(length(x))
SE = apply(subjMeans[,2:71], 1, se)
# add whiskers
arrows(x0 = setSize, y0 = M,
x1 = setSize, y1 = M+SE,
length = 0.05, angle=90)
arrows(x0 = setSize, y0 = M,
x1 = setSize, y1 = M-SE,
length = 0.05, angle=90)
rawdata = data.frame()
filestem = "https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/subject-"
for (n in 1:70){
file = paste(filestem, n, ".csv", sep = "")
temp = read.csv(file)
d = select(temp, block, correct, present, setSize, response_time)
d$subject_nr = n
rawdata = rbind(rawdata, d)
}
data = rawdata %>%
filter(block != "practice") %>%
mutate(rt = response_time)
clean = data %>%
filter(correct == 1)
clean %>%
ggplot(aes(x=rt)) +
geom_density()
clean = data %>%
filter(correct == 1 & rt < 2000)
collapsed = clean %>%
group_by(subject_nr, setSize, present) %>%
summarize(mRT = mean(rt))
meansMatrix = collapsed %>%
group_by(setSize, present) %>%
summarize(m = mean(mRT)) %>%
spread(key=present, value=m) %>%
as.matrix()
setSize = meansMatrix[,1]
P = meansMatrix[,3]
NP = meansMatrix[,2]
M = apply(meansMatrix[,2:3], 1, mean)
plot(x = setSize, y = M,
pch = 3,
cex = 1.5,
xlab = "Number of symbols in memory",
ylab = "RT (ms)",
ylim = c(450,1100))
model = lm(M ~ setSize)
abline(model)
summary(model)
library(tidyverse)
# demographics
demo = read.csv("https://raw.githubusercontent.com/tomfaulkenberry/courses/master/canvas/5316/sternbergData/demographic.csv")
mean(demo$age)
sd(demo$age)
table(demo$gender)
shiny::runApp('Desktop/costApp')
shiny::runApp('Desktop/costApp')
shiny::runApp('Desktop/bayesFactorCalc')
library(BayesFactor)
ttest.tstat(t=2.40, n1=25)
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
result=ttest.tstat(t=2.40, n1=25)
result[['bf']]
exp(result[['bf']])
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
ttest.tstat(2.24, n1=25)
result = ttest.tstat(t=2.24, n1=25)
result
exp(result$bf)
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
?radioButtons
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp()
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
runApp('Desktop/bayesFactorCalc')
